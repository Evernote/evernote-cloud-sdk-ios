/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "ENTProtocol.h"
#import "ENTException.h"
#import "FATObject.h"

enum EDAMResult {
  Result_SUCCESS = 1,
  Result_UNKNOWN_OPENID = 2,
  Result_USER_EXISTS = 3,
  Result_OPENID_CONFLICT = 4
};

enum EDAMServiceProvider {
  ServiceProvider_GOOGLE = 0,
  ServiceProvider_FACEBOOK = 1
};

#import "EDAMTypes.h"

/*
 * This structure encapsulates request parameters for registration and Authentication using OpenID
 * <dl>
 * <dt>tokenPayload </dt>
 *   <dd>
 *  OpenID token payload from the provider.Please note that this method expects a valid
 * JSONArray consisting id_token and refresh_token.
 *   </dd>
 * 
 * <dt>serviceProvider</dt>
 *   <dd>
 *   ServiceProvider represented by the ServiceProvider enum
 *   </dd>
 */
@interface EDAMOpenIdCredential : FATObject 
@property (nonatomic, strong) NSString * tokenPayload;
@property (nonatomic, strong) NSNumber * serviceProvider; // int
@end

/*
 * This structure encapsulates request parameters for registration and Authentication using username and
 * password
 * <dl>
 * <dt>userId/dt>
 *   <dd>
 *  Id of the user to be authenticated or registered.
 *   </dd>
 * 
 * <dt>password</dt>
 *   <dd>
 *  Password of the user to be authenticated or registered.
 *   </dd>
 */
@interface EDAMPlainCredential : FATObject 
@property (nonatomic, strong) NSNumber * userId; // EDAMUserID
@property (nonatomic, strong) NSString * password;
@end

/*
 * This structure encapsulates the information about the result of
 * Authentication operation. Authentication is conducted against the AuthenticationStore.
 * <dl>
 * <dt>userId/dt>
 *   <dd>
 *   The userId of AuthenticatedUser. In case of Username/Password based authentication this
 *   field will match the incoming userId parameter. In case of OpenID based Authentication,
 *   the userId will be populated from AuthenticationStore and returned to the caller.
 *   </dd>
 * 
 * <dt>userEmail</dt>
 *   <dd>
 *   When Authentication is done using OpenID, user's email address is expected to be a
 *  part of OpenID token. Whenever available, this field will be populated with the email
 *   id found in the token. Based on Result enum value, Caller has an option to begin
 *   asynchronous flow to associate existing user to the openID based on email
 *   address from the AuthenticationResult or store the email address as account email
 *   address.
 *   </dd>
 * 
 * <dt>result</dt>
 *   <dd>
 *   This field refers to the Result structure defined as above.
 *   </dd>
 */
@interface EDAMAuthenticationRequestResult : FATObject 
@property (nonatomic, strong) NSNumber * userId; // EDAMUserID
@property (nonatomic, strong) NSString * userEmail;
@property (nonatomic, strong) NSNumber * result; // int
@end

/*
 * This structure encapsulates the information about the result of
 * Registration operation. Registration APIS are used to create user footprint in AuthenticationStore.
 * <dl>
 * <dt>refreshToken</dt>
 *   <dd>
 *   In case of registration with OpenID, refreshToken is returned to the caller.
 *   If OpenID token includes a refreshToken, it is returned to the caller
 *  to keep track of the refreshToken for a given user.
 *   </dd>
 * <dt>result</dt>
 *   <dd>
 *   This field refers to the Result structure defined as above.
 *   Only Result.SUCCESS is relevant. Result.UNKNOWN_OPENID will never
 *   be returned via Registration operation. In case of failures, exception will be thrown.
 *   </dd>
 */
@interface EDAMRegistrationRequestResult : FATObject 
@property (nonatomic, strong) NSString * refreshToken;
@property (nonatomic, strong) NSString * userEmail;
@property (nonatomic, strong) NSNumber * result; // int
@property (nonatomic, strong) NSString * name;
@end

@interface EDAMAuthenticationTypesConstants : NSObject 
@end
